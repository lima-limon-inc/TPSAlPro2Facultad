package cola_test

import (
	TDACola "cola"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestColaVacia(t *testing.T) {
	t.Log("Hacemos pruebas con una cola de una cantidad baja de elementos")
	cola := TDACola.CrearColaEnlazada[int]()
	require.PanicsWithValue(t, "La cola esta vacia", func() { cola.VerPrimero() })
	require.PanicsWithValue(t, "La cola esta vacia", func() { cola.Desencolar() })
	require.EqualValues(t, true, cola.EstaVacia())
	t.Log("Veo si la cola vacia se sigue comportando como tal incluso despues de encolar y desencolar")
	cola.Encolar(1)
	cola.Desencolar()
	require.PanicsWithValue(t, "La cola esta vacia", func() { cola.VerPrimero() })
	require.PanicsWithValue(t, "La cola esta vacia", func() { cola.Desencolar() })
	require.EqualValues(t, true, cola.EstaVacia())
}

func TestFIFO(t *testing.T) {
	t.Log("Pruebo que los elementos son devueltos en el orden correcto al desacolarlos")
	cola := TDACola.CrearColaEnlazada[int]()
	cola.Encolar(1)
	cola.Encolar(2)
	cola.Encolar(3)
	cola.Encolar(4)
	cola.Encolar(5)
	cola.Encolar(6)
	cola.Encolar(7)
	cola.Encolar(8)
	cola.Encolar(9)
	require.EqualValues(t, 1, cola.VerPrimero())
	require.EqualValues(t, 1, cola.Desencolar())
	require.EqualValues(t, 2, cola.Desencolar())
	require.EqualValues(t, 3, cola.Desencolar())
	require.EqualValues(t, 4, cola.Desencolar())
	require.EqualValues(t, 5, cola.Desencolar())
	t.Log("Apilo un item en el medio, por las dudas")
	cola.Encolar(99)
	t.Log("Miro el tope en el medio")
	require.EqualValues(t, 6, cola.VerPrimero())
	require.EqualValues(t, 6, cola.Desencolar())
	require.EqualValues(t, 7, cola.Desencolar())
	require.EqualValues(t, 8, cola.Desencolar())
	require.EqualValues(t, 9, cola.Desencolar())
	require.EqualValues(t, 99, cola.Desencolar())
	require.EqualValues(t, true, cola.EstaVacia())
	t.Log("Pruebo que los elementos son devueltos en el orden correcto al desacolarlos, esta vez con strings")
	colaStr := TDACola.CrearColaEnlazada[string]()
	colaStr.Encolar("A")
	colaStr.Encolar("B")
	colaStr.Encolar("C")
	colaStr.Encolar("D")
	colaStr.Encolar("E")
	colaStr.Encolar("F")
	colaStr.Encolar("G")
	colaStr.Encolar("H")
	colaStr.Encolar("I")
	colaStr.Encolar("J")
	colaStr.Encolar("K")
	colaStr.Encolar("L")
	colaStr.Encolar("M")
	colaStr.Encolar("N")
	colaStr.Encolar("O")
	colaStr.Encolar("P")
	colaStr.Encolar("Q")
	colaStr.Encolar("R")
	colaStr.Encolar("S")
	colaStr.Encolar("T")
	colaStr.Encolar("U")
	colaStr.Encolar("V")
	colaStr.Encolar("W")
	colaStr.Encolar("X")
	colaStr.Encolar("Y")
	colaStr.Encolar("Z")
	require.EqualValues(t, "A", colaStr.VerPrimero())
	require.EqualValues(t, "A", colaStr.Desencolar())
	require.EqualValues(t, "B", colaStr.Desencolar())
	require.EqualValues(t, "C", colaStr.Desencolar())
	require.EqualValues(t, "D", colaStr.Desencolar())
	require.EqualValues(t, "E", colaStr.Desencolar())
	require.EqualValues(t, "F", colaStr.Desencolar())
	require.EqualValues(t, "G", colaStr.Desencolar())
	require.EqualValues(t, "H", colaStr.Desencolar())
	require.EqualValues(t, "I", colaStr.Desencolar())
	require.EqualValues(t, "J", colaStr.Desencolar())
	require.EqualValues(t, "K", colaStr.Desencolar())
	require.EqualValues(t, "L", colaStr.Desencolar())
	require.EqualValues(t, "M", colaStr.Desencolar())
	require.EqualValues(t, "N", colaStr.Desencolar())
	require.EqualValues(t, "O", colaStr.Desencolar())
	require.EqualValues(t, "P", colaStr.Desencolar())
	require.EqualValues(t, "Q", colaStr.Desencolar())
	require.EqualValues(t, "R", colaStr.Desencolar())
	require.EqualValues(t, "S", colaStr.Desencolar())
	require.EqualValues(t, "T", colaStr.Desencolar())
	require.EqualValues(t, "U", colaStr.Desencolar())
	require.EqualValues(t, "V", colaStr.Desencolar())
	require.EqualValues(t, "W", colaStr.Desencolar())
	require.EqualValues(t, "X", colaStr.Desencolar())
	require.EqualValues(t, "Y", colaStr.Desencolar())
	require.EqualValues(t, "Z", colaStr.Desencolar())
}

func TestVolumen(t *testing.T) {
	t.Log("Hacemos la prueba de volumen")
	cola := TDACola.CrearColaEnlazada[int]()
	for i := 0; i < 10000; i++ {
		cola.Encolar(i)
	}
	for i := 0; i < 10000; i++ {
		require.EqualValues(t, i, cola.Desencolar())
	}
}
